// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

    PARTS:


    // A or C instruction
    DMux(in=...,
    sel=instruction[15],
    a=aInstructionActive,
    b=cInstructionActive);

    // A Register: Input Multiplexer: ALU Out or Instruction 
    Mux16(a=aluOut,
    b=instruction[0..14],
    sel=aRegisterSelector,
    out=registerAIn);

    // A register
    Register(in=registerAIn,
    out=registerAOut,
    load=registerALoad);

    // D register
    Register(in=aluOut,
    out=registerDOut,
    load=registerDLoad);
    
    // ALU Input Multiplexer: Reg A or RAM

    Mux16(a=registerAOut,
    b=inM,
    sel=memoryOrRegisterASelector,
    out=memoryOrRegisterAOut);
    
    ALU(x=registerDOut,
    y=memoryOrRegisterAOut,
    zx=..., 
    nx=..., 
    zy=..., 
    ny=..., 
    f=...,  
    no=...,

    out=aluOut,
    zr=aluZero,
    ng=aluNegative);

    // Sign flags

    Not(in=aluZero,
    out=aluNonZero);
    
    Not(in=aluNegative,
    out=aluNonNegative);

    And(a=aluNonZero
    b=aluNonNegative
    out=aluPositive);
    
    Not(in=aluPositive,
    out=aluNonPositive);
    
    Or(a=aluZero,
    b=aluNegative,
    out=aluLessThanOrEqualToZero);
    
    // Routing ALU Output
    
    And(a=cInstructionActive
    b=instruction[5]
    out=registerALoadALU);
    
    And(a=cInstructionActive
    b=instruction[4]
    out=registerDLoad);

    And(a=cInstructionActive
    b=instruction[3]
    out=writeM);

    // Jump Handling

    // case
    // 000: no
    // 001 and out > 0: jump
    // 010 and out == 0: jump
    // 011 and out >= 0: jump
    // 100 and out < 0: jump
    // 101 and out != 0: jump
    // 110 and out <= 0: jump
    // 111: jump

    DMux8Way(
    in=jumpBits,
    a=noJump,
    b=jumpIfPositive,
    c=jumpIfZero,
    d=jumpIfPositiveOrZero,
    e=jumpIfNegative,
    f=jumpIfNonZero,
    g=jumpIfNegativeOrZero,
    h=jumpRegardless);
    
    And(a=jumpIfPositive,
    b=aluPositive,
    out=jumpIfPositiveTrue);

    And(a=jumpIfZero,
    b=aluZero,
    out=jumpIfZeroTrue);

    And(a=jumpIfPositiveOrZero,
    b=aluNonNegative,
    out=jumpIfPositiveOrZeroTrue);
    
    And(a=jumpIfNegative,
    b=aluNegative,
    out=jumpIfNegativeTrue);

    And(a=jumpIfNonZero,
    b=aluNonZero,
    out=jumpIfNonZeroTrue);
    
    And(a=jumpIfNegativeOrZero,
    b=aluNonPositive,
    out=jumpIfNegativeOrZeroTrue);

    Or8Way(in[0]=jumpIfPositiveTrue,
    in[1]=jumpIfZeroTrue,
    in[2]=jumpIfPositiveOrZeroTrue,
    in[3]=jumpIfNegativeTrue,
    in[4]=jumpIfNonZeroTrue,
    in[5]=jumpIfNegativeOrZeroTrue,
    in[6]=jumpRegardless,
    out=jumpActive);

    Not(in=jumpActive,
    out=programCounterInc);
    
    // Program Counter

    PC(reset=reset,
    load=jumpActive,
    inc=programCounterInc,
    in=registerAOut,
    out=pc[0..14]);

    //////////////////// 
    // Outputs
    //////////////////// 
    
    Trim16(in=registerAOut,
    b=addressM);
    
    Or16(a=aluOut,
    b=aluOut,
    out=outM)

    // TODO: A register input: ALU/Instruction selector
    // TODO: ALU input: Memory / A register selector
    // TODO: decode instruction
    // TODO: programCounter control bits
    // TODO: ALU control bits
    // TODO: writeM

}
